type CloudinaryImage_File {
  id: ID
  path: String
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

type Action_content_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input SdgRelateToManyInput {
  create: [SdgCreateInput]
  connect: [SdgWhereUniqueInput]
  disconnect: [SdgWhereUniqueInput]
  disconnectAll: Boolean
}

input CategoryRelateToManyInput {
  create: [CategoryCreateInput]
  connect: [CategoryWhereUniqueInput]
  disconnect: [CategoryWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Action {
  id: ID!
  title: String
  status: String
  publishDate: String
  image: CloudinaryImage_File
  content: Action_content_DocumentField
  relatedSdgs(
    where: SdgWhereInput
    search: String
    sortBy: [SortSdgsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Sdg!]!
  _relatedSdgsMeta(
    where: SdgWhereInput
    search: String
    sortBy: [SortSdgsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
  categories(
    where: CategoryWhereInput
    search: String
    sortBy: [SortCategoriesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Category!]!
  _categoriesMeta(
    where: CategoryWhereInput
    search: String
    sortBy: [SortCategoriesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
}

input ActionWhereInput {
  AND: [ActionWhereInput]
  OR: [ActionWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_i: String
  title_not_i: String
  title_contains_i: String
  title_not_contains_i: String
  title_starts_with_i: String
  title_not_starts_with_i: String
  title_ends_with_i: String
  title_not_ends_with_i: String
  title_in: [String]
  title_not_in: [String]
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
  publishDate: String
  publishDate_not: String
  publishDate_lt: String
  publishDate_lte: String
  publishDate_gt: String
  publishDate_gte: String
  publishDate_in: [String]
  publishDate_not_in: [String]
  image: String
  image_not: String
  image_in: [String]
  image_not_in: [String]

  """
   condition must be true for all nodes
  """
  relatedSdgs_every: SdgWhereInput

  """
   condition must be true for at least 1 node
  """
  relatedSdgs_some: SdgWhereInput

  """
   condition must be false for all nodes
  """
  relatedSdgs_none: SdgWhereInput

  """
   condition must be true for all nodes
  """
  categories_every: CategoryWhereInput

  """
   condition must be true for at least 1 node
  """
  categories_some: CategoryWhereInput

  """
   condition must be false for all nodes
  """
  categories_none: CategoryWhereInput
}

input ActionWhereUniqueInput {
  id: ID!
}

enum SortActionsBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  status_ASC
  status_DESC
  publishDate_ASC
  publishDate_DESC
  relatedSdgs_ASC
  relatedSdgs_DESC
  categories_ASC
  categories_DESC
}

input ActionUpdateInput {
  title: String
  status: String
  publishDate: String
  image: Upload
  content: JSON
  relatedSdgs: SdgRelateToManyInput
  categories: CategoryRelateToManyInput
}

input ActionsUpdateInput {
  id: ID!
  data: ActionUpdateInput
}

input ActionCreateInput {
  title: String
  status: String
  publishDate: String
  image: Upload
  content: JSON
  relatedSdgs: SdgRelateToManyInput
  categories: CategoryRelateToManyInput
}

input ActionsCreateInput {
  data: ActionCreateInput
}

input ActionRelateToManyInput {
  create: [ActionCreateInput]
  connect: [ActionWhereUniqueInput]
  disconnect: [ActionWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Category {
  id: ID!
  title: String
  actions(
    where: ActionWhereInput
    search: String
    sortBy: [SortActionsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Action!]!
  _actionsMeta(
    where: ActionWhereInput
    search: String
    sortBy: [SortActionsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
}

input CategoryWhereInput {
  AND: [CategoryWhereInput]
  OR: [CategoryWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_i: String
  title_not_i: String
  title_contains_i: String
  title_not_contains_i: String
  title_starts_with_i: String
  title_not_starts_with_i: String
  title_ends_with_i: String
  title_not_ends_with_i: String
  title_in: [String]
  title_not_in: [String]

  """
   condition must be true for all nodes
  """
  actions_every: ActionWhereInput

  """
   condition must be true for at least 1 node
  """
  actions_some: ActionWhereInput

  """
   condition must be false for all nodes
  """
  actions_none: ActionWhereInput
}

input CategoryWhereUniqueInput {
  id: ID!
}

enum SortCategoriesBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  actions_ASC
  actions_DESC
}

input CategoryUpdateInput {
  title: String
  actions: ActionRelateToManyInput
}

input CategoriesUpdateInput {
  id: ID!
  data: CategoryUpdateInput
}

input CategoryCreateInput {
  title: String
  actions: ActionRelateToManyInput
}

input CategoriesCreateInput {
  data: CategoryCreateInput
}

input ActionRelateToOneInput {
  create: ActionCreateInput
  connect: ActionWhereUniqueInput
  disconnect: ActionWhereUniqueInput
  disconnectAll: Boolean
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input UserRelateToManyInput {
  create: [UserCreateInput]
  connect: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Completion {
  id: ID!
  action: Action
  user: User
  completionDate: String
  kudos(
    where: UserWhereInput
    search: String
    sortBy: [SortUsersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [User!]!
  _kudosMeta(
    where: UserWhereInput
    search: String
    sortBy: [SortUsersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
}

input CompletionWhereInput {
  AND: [CompletionWhereInput]
  OR: [CompletionWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  action: ActionWhereInput
  action_is_null: Boolean
  user: UserWhereInput
  user_is_null: Boolean
  completionDate: String
  completionDate_not: String
  completionDate_lt: String
  completionDate_lte: String
  completionDate_gt: String
  completionDate_gte: String
  completionDate_in: [String]
  completionDate_not_in: [String]

  """
   condition must be true for all nodes
  """
  kudos_every: UserWhereInput

  """
   condition must be true for at least 1 node
  """
  kudos_some: UserWhereInput

  """
   condition must be false for all nodes
  """
  kudos_none: UserWhereInput
}

input CompletionWhereUniqueInput {
  id: ID!
}

enum SortCompletionsBy {
  id_ASC
  id_DESC
  action_ASC
  action_DESC
  user_ASC
  user_DESC
  completionDate_ASC
  completionDate_DESC
  kudos_ASC
  kudos_DESC
}

input CompletionUpdateInput {
  action: ActionRelateToOneInput
  user: UserRelateToOneInput
  completionDate: String
  kudos: UserRelateToManyInput
}

input CompletionsUpdateInput {
  id: ID!
  data: CompletionUpdateInput
}

input CompletionCreateInput {
  action: ActionRelateToOneInput
  user: UserRelateToOneInput
  completionDate: String
  kudos: UserRelateToManyInput
}

input CompletionsCreateInput {
  data: CompletionCreateInput
}

"""
 A keystone list
"""
type Idea {
  id: ID!
  title: String
  body: String
  user: User
}

input IdeaWhereInput {
  AND: [IdeaWhereInput]
  OR: [IdeaWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_i: String
  title_not_i: String
  title_contains_i: String
  title_not_contains_i: String
  title_starts_with_i: String
  title_not_starts_with_i: String
  title_ends_with_i: String
  title_not_ends_with_i: String
  title_in: [String]
  title_not_in: [String]
  body: String
  body_not: String
  body_contains: String
  body_not_contains: String
  body_starts_with: String
  body_not_starts_with: String
  body_ends_with: String
  body_not_ends_with: String
  body_i: String
  body_not_i: String
  body_contains_i: String
  body_not_contains_i: String
  body_starts_with_i: String
  body_not_starts_with_i: String
  body_ends_with_i: String
  body_not_ends_with_i: String
  body_in: [String]
  body_not_in: [String]
  user: UserWhereInput
  user_is_null: Boolean
}

input IdeaWhereUniqueInput {
  id: ID!
}

enum SortIdeasBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
  user_ASC
  user_DESC
}

input IdeaUpdateInput {
  title: String
  body: String
  user: UserRelateToOneInput
}

input IdeasUpdateInput {
  id: ID!
  data: IdeaUpdateInput
}

input IdeaCreateInput {
  title: String
  body: String
  user: UserRelateToOneInput
}

input IdeasCreateInput {
  data: IdeaCreateInput
}

type Sdg_content_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

"""
 A keystone list
"""
type Sdg {
  id: ID!
  sdgNo: Int
  title: String
  description: String
  content: Sdg_content_DocumentField
  actions(
    where: ActionWhereInput
    search: String
    sortBy: [SortActionsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Action!]!
  _actionsMeta(
    where: ActionWhereInput
    search: String
    sortBy: [SortActionsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
}

input SdgWhereInput {
  AND: [SdgWhereInput]
  OR: [SdgWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  sdgNo: Int
  sdgNo_not: Int
  sdgNo_lt: Int
  sdgNo_lte: Int
  sdgNo_gt: Int
  sdgNo_gte: Int
  sdgNo_in: [Int]
  sdgNo_not_in: [Int]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_i: String
  title_not_i: String
  title_contains_i: String
  title_not_contains_i: String
  title_starts_with_i: String
  title_not_starts_with_i: String
  title_ends_with_i: String
  title_not_ends_with_i: String
  title_in: [String]
  title_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]

  """
   condition must be true for all nodes
  """
  actions_every: ActionWhereInput

  """
   condition must be true for at least 1 node
  """
  actions_some: ActionWhereInput

  """
   condition must be false for all nodes
  """
  actions_none: ActionWhereInput
}

input SdgWhereUniqueInput {
  id: ID!
}

enum SortSdgsBy {
  id_ASC
  id_DESC
  sdgNo_ASC
  sdgNo_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  actions_ASC
  actions_DESC
}

input SdgUpdateInput {
  sdgNo: Int
  title: String
  description: String
  content: JSON
  actions: ActionRelateToManyInput
}

input SdgsUpdateInput {
  id: ID!
  data: SdgUpdateInput
}

input SdgCreateInput {
  sdgNo: Int
  title: String
  description: String
  content: JSON
  actions: ActionRelateToManyInput
}

input SdgsCreateInput {
  data: SdgCreateInput
}

input CompletionRelateToManyInput {
  create: [CompletionCreateInput]
  connect: [CompletionWhereUniqueInput]
  disconnect: [CompletionWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type User {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
  profilePicture: CloudinaryImage_File
  biography: String
  areasOfInterest: String
  funFacts: String
  favouriteSdgs(
    where: SdgWhereInput
    search: String
    sortBy: [SortSdgsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Sdg!]!
  _favouriteSdgsMeta(
    where: SdgWhereInput
    search: String
    sortBy: [SortSdgsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
  completions(
    where: CompletionWhereInput
    search: String
    sortBy: [SortCompletionsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Completion!]!
  _completionsMeta(
    where: CompletionWhereInput
    search: String
    sortBy: [SortCompletionsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
  isAdmin: Boolean
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  profilePicture: String
  profilePicture_not: String
  profilePicture_in: [String]
  profilePicture_not_in: [String]
  biography: String
  biography_not: String
  biography_contains: String
  biography_not_contains: String
  biography_starts_with: String
  biography_not_starts_with: String
  biography_ends_with: String
  biography_not_ends_with: String
  biography_i: String
  biography_not_i: String
  biography_contains_i: String
  biography_not_contains_i: String
  biography_starts_with_i: String
  biography_not_starts_with_i: String
  biography_ends_with_i: String
  biography_not_ends_with_i: String
  biography_in: [String]
  biography_not_in: [String]
  areasOfInterest: String
  areasOfInterest_not: String
  areasOfInterest_contains: String
  areasOfInterest_not_contains: String
  areasOfInterest_starts_with: String
  areasOfInterest_not_starts_with: String
  areasOfInterest_ends_with: String
  areasOfInterest_not_ends_with: String
  areasOfInterest_i: String
  areasOfInterest_not_i: String
  areasOfInterest_contains_i: String
  areasOfInterest_not_contains_i: String
  areasOfInterest_starts_with_i: String
  areasOfInterest_not_starts_with_i: String
  areasOfInterest_ends_with_i: String
  areasOfInterest_not_ends_with_i: String
  areasOfInterest_in: [String]
  areasOfInterest_not_in: [String]
  funFacts: String
  funFacts_not: String
  funFacts_contains: String
  funFacts_not_contains: String
  funFacts_starts_with: String
  funFacts_not_starts_with: String
  funFacts_ends_with: String
  funFacts_not_ends_with: String
  funFacts_i: String
  funFacts_not_i: String
  funFacts_contains_i: String
  funFacts_not_contains_i: String
  funFacts_starts_with_i: String
  funFacts_not_starts_with_i: String
  funFacts_ends_with_i: String
  funFacts_not_ends_with_i: String
  funFacts_in: [String]
  funFacts_not_in: [String]

  """
   condition must be true for all nodes
  """
  favouriteSdgs_every: SdgWhereInput

  """
   condition must be true for at least 1 node
  """
  favouriteSdgs_some: SdgWhereInput

  """
   condition must be false for all nodes
  """
  favouriteSdgs_none: SdgWhereInput

  """
   condition must be true for all nodes
  """
  completions_every: CompletionWhereInput

  """
   condition must be true for at least 1 node
  """
  completions_some: CompletionWhereInput

  """
   condition must be false for all nodes
  """
  completions_none: CompletionWhereInput
  isAdmin: Boolean
  isAdmin_not: Boolean
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetIssuedAt_not: String
  passwordResetIssuedAt_lt: String
  passwordResetIssuedAt_lte: String
  passwordResetIssuedAt_gt: String
  passwordResetIssuedAt_gte: String
  passwordResetIssuedAt_in: [String]
  passwordResetIssuedAt_not_in: [String]
  passwordResetRedeemedAt: String
  passwordResetRedeemedAt_not: String
  passwordResetRedeemedAt_lt: String
  passwordResetRedeemedAt_lte: String
  passwordResetRedeemedAt_gt: String
  passwordResetRedeemedAt_gte: String
  passwordResetRedeemedAt_in: [String]
  passwordResetRedeemedAt_not_in: [String]
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  biography_ASC
  biography_DESC
  areasOfInterest_ASC
  areasOfInterest_DESC
  funFacts_ASC
  funFacts_DESC
  favouriteSdgs_ASC
  favouriteSdgs_DESC
  completions_ASC
  completions_DESC
  isAdmin_ASC
  isAdmin_DESC
  passwordResetIssuedAt_ASC
  passwordResetIssuedAt_DESC
  passwordResetRedeemedAt_ASC
  passwordResetRedeemedAt_DESC
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  profilePicture: Upload
  biography: String
  areasOfInterest: String
  funFacts: String
  favouriteSdgs: SdgRelateToManyInput
  completions: CompletionRelateToManyInput
  isAdmin: Boolean
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  profilePicture: Upload
  biography: String
  areasOfInterest: String
  funFacts: String
  favouriteSdgs: SdgRelateToManyInput
  completions: CompletionRelateToManyInput
  isAdmin: Boolean
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input UsersCreateInput {
  data: UserCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type _QueryMeta {
  count: Int
}

type Mutation {
  """
   Create a single Action item.
  """
  createAction(data: ActionCreateInput): Action

  """
   Create multiple Action items.
  """
  createActions(data: [ActionsCreateInput]): [Action]

  """
   Update a single Action item by ID.
  """
  updateAction(id: ID!, data: ActionUpdateInput): Action

  """
   Update multiple Action items by ID.
  """
  updateActions(data: [ActionsUpdateInput]): [Action]

  """
   Delete a single Action item by ID.
  """
  deleteAction(id: ID!): Action

  """
   Delete multiple Action items by ID.
  """
  deleteActions(ids: [ID!]): [Action]

  """
   Create a single Category item.
  """
  createCategory(data: CategoryCreateInput): Category

  """
   Create multiple Category items.
  """
  createCategories(data: [CategoriesCreateInput]): [Category]

  """
   Update a single Category item by ID.
  """
  updateCategory(id: ID!, data: CategoryUpdateInput): Category

  """
   Update multiple Category items by ID.
  """
  updateCategories(data: [CategoriesUpdateInput]): [Category]

  """
   Delete a single Category item by ID.
  """
  deleteCategory(id: ID!): Category

  """
   Delete multiple Category items by ID.
  """
  deleteCategories(ids: [ID!]): [Category]

  """
   Create a single Completion item.
  """
  createCompletion(data: CompletionCreateInput): Completion

  """
   Create multiple Completion items.
  """
  createCompletions(data: [CompletionsCreateInput]): [Completion]

  """
   Update a single Completion item by ID.
  """
  updateCompletion(id: ID!, data: CompletionUpdateInput): Completion

  """
   Update multiple Completion items by ID.
  """
  updateCompletions(data: [CompletionsUpdateInput]): [Completion]

  """
   Delete a single Completion item by ID.
  """
  deleteCompletion(id: ID!): Completion

  """
   Delete multiple Completion items by ID.
  """
  deleteCompletions(ids: [ID!]): [Completion]

  """
   Create a single Idea item.
  """
  createIdea(data: IdeaCreateInput): Idea

  """
   Create multiple Idea items.
  """
  createIdeas(data: [IdeasCreateInput]): [Idea]

  """
   Update a single Idea item by ID.
  """
  updateIdea(id: ID!, data: IdeaUpdateInput): Idea

  """
   Update multiple Idea items by ID.
  """
  updateIdeas(data: [IdeasUpdateInput]): [Idea]

  """
   Delete a single Idea item by ID.
  """
  deleteIdea(id: ID!): Idea

  """
   Delete multiple Idea items by ID.
  """
  deleteIdeas(ids: [ID!]): [Idea]

  """
   Create a single Sdg item.
  """
  createSdg(data: SdgCreateInput): Sdg

  """
   Create multiple Sdg items.
  """
  createSdgs(data: [SdgsCreateInput]): [Sdg]

  """
   Update a single Sdg item by ID.
  """
  updateSdg(id: ID!, data: SdgUpdateInput): Sdg

  """
   Update multiple Sdg items by ID.
  """
  updateSdgs(data: [SdgsUpdateInput]): [Sdg]

  """
   Delete a single Sdg item by ID.
  """
  deleteSdg(id: ID!): Sdg

  """
   Delete multiple Sdg items by ID.
  """
  deleteSdgs(ids: [ID!]): [Sdg]

  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): SendUserPasswordResetLinkResult
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
  endSession: Boolean!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type SendUserPasswordResetLinkResult {
  code: PasswordResetRequestErrorCode!
  message: String!
}

enum PasswordResetRequestErrorCode {
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
}

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
  TOKEN_NOT_SET
  TOKEN_MISMATCH
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  """
   Search for all Action items which match the where clause.
  """
  allActions(
    where: ActionWhereInput
    search: String
    sortBy: [SortActionsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Action]

  """
   Search for the Action item with the matching ID.
  """
  Action(where: ActionWhereUniqueInput!): Action

  """
   Perform a meta-query on all Action items which match the where clause.
  """
  _allActionsMeta(
    where: ActionWhereInput
    search: String
    sortBy: [SortActionsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all Category items which match the where clause.
  """
  allCategories(
    where: CategoryWhereInput
    search: String
    sortBy: [SortCategoriesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Category]

  """
   Search for the Category item with the matching ID.
  """
  Category(where: CategoryWhereUniqueInput!): Category

  """
   Perform a meta-query on all Category items which match the where clause.
  """
  _allCategoriesMeta(
    where: CategoryWhereInput
    search: String
    sortBy: [SortCategoriesBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all Completion items which match the where clause.
  """
  allCompletions(
    where: CompletionWhereInput
    search: String
    sortBy: [SortCompletionsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Completion]

  """
   Search for the Completion item with the matching ID.
  """
  Completion(where: CompletionWhereUniqueInput!): Completion

  """
   Perform a meta-query on all Completion items which match the where clause.
  """
  _allCompletionsMeta(
    where: CompletionWhereInput
    search: String
    sortBy: [SortCompletionsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all Idea items which match the where clause.
  """
  allIdeas(
    where: IdeaWhereInput
    search: String
    sortBy: [SortIdeasBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Idea]

  """
   Search for the Idea item with the matching ID.
  """
  Idea(where: IdeaWhereUniqueInput!): Idea

  """
   Perform a meta-query on all Idea items which match the where clause.
  """
  _allIdeasMeta(
    where: IdeaWhereInput
    search: String
    sortBy: [SortIdeasBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all Sdg items which match the where clause.
  """
  allSdgs(
    where: SdgWhereInput
    search: String
    sortBy: [SortSdgsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [Sdg]

  """
   Search for the Sdg item with the matching ID.
  """
  Sdg(where: SdgWhereUniqueInput!): Sdg

  """
   Perform a meta-query on all Sdg items which match the where clause.
  """
  _allSdgsMeta(
    where: SdgWhereInput
    search: String
    sortBy: [SortSdgsBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta

  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput
    search: String
    sortBy: [SortUsersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): [User]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput
    search: String
    sortBy: [SortUsersBy!]
    orderBy: String
    first: Int
    skip: Int
  ): _QueryMeta
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
